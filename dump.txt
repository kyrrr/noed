sits = Situation.objects.filter(mytweet__isnull=False)
        for s in sits:
            # print((s.mytweet_set.count()))
            # print((s.mytweet_set.all()))
            for t in s.mytweet_set.all():
                print("\n")
                print(t.text.encode("UTF-8"))
        exit()


# Situation.objects.filter(mytweet__screen_name=sn).delete()
        sits = Situation.objects.filter(mytweet__screen_name=sn).filter(mytweet__isnull=False)
        print(len(sits))
        for s in sits:
            # print((s.mytweet_set.count()))
            # print((s.mytweet_set.all()))
            for t in s.mytweet_set.all():
                print("\n")
                print(t.text.encode("UTF-8"))
        exit()


 sdf = MyTweet.objects.all()
        print(sdf)
        exit()
        sits = Situation.objects.filter(mytweet__isnull=False)
        for s in sits:
            # print((s.mytweet_set.count()))
            # print((s.mytweet_set.all()))
            for t in s.mytweet_set.all():
                print("\n")
                print(t.text.encode("UTF-8"))
        exit()


        Keyword.objects.create(word="er på stedet".encode("UTF-8"), category="Status")
        Keyword.objects.create(word="er på vei".encode("UTF-8"), category="Status")
        Keyword.objects.create(word="melding om".encode("UTF-8"), category="Status")
        Keyword.objects.create(word="er fremme".encode("UTF-8"), category="Status")
        Keyword.objects.create(word="rapportert".encode("UTF-8"), category="Status")
        Keyword.objects.create(word="pågrepet".encode("UTF-8"), category="Status")
        Keyword.objects.create(word="i arrest".encode("UTF-8"), category="Status")

        Keyword.objects.create(word="gate".encode("UTF-8"), category="Location")
        Keyword.objects.create(word="gata".encode("UTF-8"), category="Location")
        Keyword.objects.create(word="veien".encode("UTF-8"), category="Location")
        Keyword.objects.create(word="vegen".encode("UTF-8"), category="Location")
        Keyword.objects.create(word="skole".encode("UTF-8"), category="Location")
        Keyword.objects.create(word="skule".encode("UTF-8"), category="Location")

        Keyword.objects.create(word="nødetatene".encode("UTF-8"), category="Actor")
        Keyword.objects.create(word="brannvesenet".encode("UTF-8"), category="Actor")
        Keyword.objects.create(word="politiet".encode("UTF-8"), category="Actor")
        Keyword.objects.create(word="ambulanse".encode("UTF-8"), category="Actor")


     python3 manage.py get_tweets oslopolitiops >> log/oslopolitiops_log.txt
      python3 manage.py scan oslopolitiops > log/oslopolitiops_scan_log.txt


print(category + " for " + t.twitter_msg_id)
                    print("keyword:")
                    print(kw.word.encode("UTF-8"))
                    print("in text:")
                    print(t.text.encode("UTF-8"))
                    if t.parent is not None:
                        print("parent text:")
                        print(t.parent.text.encode("UTF-8"))
                    print("=============")

                # test data
    # violation_keywords = ['avskiltes', 'fratas', 'fratatt', 'tagger', 'tagging']
    # good_keywords = ['ingen personskade', 'reddet', 'funnet']
    # danger_keywords = ['røykutvikling', 'knivstukket', 'kniv', 'våpen', 'brann', 'stjålet', 'saknet', 'savnet', 'skudd']
    # status_keywords = ['melding om', 'er fremme' 'er på stedet', 'på vei til stedet',\
    #     'slukket', 'pågrepet', 'i arrest', 'tatt vare på']
    # preposition_keywords = ['i', 'på']
    # street_keywords = ['veien', 'gate']


randy = randint(0, 3)
                if randy == 3:
                    # everyone loves dogs
                    print("Enjoy this good dog while you wait for new tweets")
                    print(self.animals['DOG'])
                elif randy == 2:
                    print("Enjoy this proud eagle while you wait for new tweets ")
                    print(self.animals['EAGLE'])
                return


                import datetime
from django.core.management.base import BaseCommand
from twep.models import MyTweet
from twep.util.tweetseeker import TweetSeeker
from twep.util.tweettransformer import TweetTransformer

///////
class Command(BaseCommand):

    help = 'Checks for new tweets by user and updates data'

    def add_arguments(self, parser):
        parser.add_argument('screen_name', type=str)

    def handle(self, *args, **options):
        print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        sn = options['screen_name']
        t = TweetSeeker(screen_name=sn)
        tr = TweetTransformer(screen_name=sn)
        try:
            latest_stored = MyTweet.objects.filter(screen_name=sn).latest('created_at')
        except MyTweet.DoesNotExist:
            at = t.get_num_newest_tweets(limit=200)
            tr.make_model(at)
            return
        if latest_stored is not None:
            n = t.get_newest_single()
            if n.id_str == latest_stored.twitter_msg_id:
                return
            else:
                newest_tweets = t.get_newest_num()
                i = 0
                for nt in newest_tweets:
                    if nt.id_str == latest_stored.twitter_msg_id:
                        break
                    else:
                        i += 1
                if i > 200:
                    i = 200
                tr.make_model(t.get_newest_num(i))
                return
        return
///////